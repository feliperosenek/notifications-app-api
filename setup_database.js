const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Iniciando configura√ß√£o do banco de dados...\n');

// Fun√ß√£o para executar comandos
function executeCommand(command) {
    return new Promise((resolve, reject) => {
        console.log(`üìã Executando: ${command}`);
        exec(command, (error, stdout, stderr) => {
            if (error) {
                console.error(`‚ùå Erro: ${error.message}`);
                reject(error);
                return;
            }
            if (stderr) {
                console.warn(`‚ö†Ô∏è  Aviso: ${stderr}`);
            }
            if (stdout) {
                console.log(`‚úÖ Sucesso: ${stdout}`);
            }
            resolve(stdout);
        });
    });
}

// Fun√ß√£o para verificar se o arquivo existe
function checkFileExists(filePath) {
    if (!fs.existsSync(filePath)) {
        console.error(`‚ùå Arquivo n√£o encontrado: ${filePath}`);
        return false;
    }
    return true;
}

// Fun√ß√£o principal
async function setupDatabase() {
    try {
        // Verificar se o arquivo schema existe
        const schemaFile = path.join(__dirname, 'database_schema.sql');
        if (!checkFileExists(schemaFile)) {
            throw new Error('Arquivo database_schema.sql n√£o encontrado');
        }

        console.log('üìÅ Arquivo schema encontrado ‚úì\n');

        // Executar o script SQL
        console.log('üóÑÔ∏è  Executando schema SQL...');
        await executeCommand('psql -d notifications_app -f database_schema.sql');
        
        console.log('\n‚úÖ Schema SQL executado com sucesso!');
        
        // Verificar se as tabelas foram criadas
        console.log('\nüîç Verificando tabelas criadas...');
        await executeCommand('psql -d notifications_app -c "\\dt"');
        
        // Verificar estrutura das tabelas
        console.log('\nüìä Verificando estrutura das tabelas...');
        await executeCommand('psql -d notifications_app -c "\\d users"');
        await executeCommand('psql -d notifications_app -c "\\d routes"');
        await executeCommand('psql -d notifications_app -c "\\d messages"');
        
        console.log('\nüéâ Configura√ß√£o do banco de dados conclu√≠da com sucesso!');
        console.log('\nüìã Pr√≥ximos passos:');
        console.log('1. Configure as vari√°veis de ambiente no arquivo .env');
        console.log('2. Execute: npm start');
        console.log('3. Teste os endpoints da API');
        
    } catch (error) {
        console.error('\n‚ùå Erro durante a configura√ß√£o:', error.message);
        console.log('\nüí° Verifique se:');
        console.log('- PostgreSQL est√° instalado e rodando');
        console.log('- O banco "notifications_app" existe');
        console.log('- As credenciais est√£o corretas');
        process.exit(1);
    }
}

// Executar o script
setupDatabase();
